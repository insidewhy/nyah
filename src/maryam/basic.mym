# these can be overridden in your code if you don't like them
################################################################################
# Strings
# ^ after a rule implies there is a join between all consecutive tokens
character^ := ("'" [ ! ("\n" | "'") ] "'") | ('"' [ ! ("\n" | "'") ] '"');
quotedString^ := ("'" [ (! ( "\n" | "'") )* ] "'") | 
                ('"' [ (! ( "\n" | '"') )* ] '"');

class CharacterRange {
    character start;
    character end;
    begin := start '..' end;
}

private idFirst := 'a' .. 'z' | 'A' .. 'Z' | '_' ;
id^ := idFirst (idFirst | \d) * ;

################################################################################
# Numeric
# TODO: More
################################################################################
integer := '-'? \d+;
float^   := integer 'f' | integer '.' \d+;
octal   := '-'? '0' ^ \d+;
binary  := '-'? '0x' ^ (1|0)+;

number := integer | float | octal | binary;

# there is a builtin specialisation for join over collections and references to collections
inline class join(str, exp) {
    begin := exp (str exp)*
}

inline class escaped(quote, escape) {
    begin := quote ^ ( ( escape ^ . ) | . )+ ^ quote
}
