grammar "nyah"

IdentifierTail = [A-Za-z0-9_]*

ClassName      = [A-Z] ^ IdentifierTail
AttributeName  = [a-z] ^ IdentifierTail

SpecialCharacter = '\' [?\!\[\]\.()'"\\nrst'"]
Character = SpecialCharacter | "'" !\' "'" | '"' !\" '"'
StringMatch = \' .*? \' | \" .*? \"

MutableSpecialCharacter = '\' [wWSdD] | '.'
CharacterRange = '[' (SpecialCharacter|.)+? ']'
MutableCharacter = CharacterRange | MutableSpecialCharacter

Expression {
    BasicItem = '(' Value ')'

    SequenceItem = Choice | ChoiceItem
    Sequence = (SequenceItem % '~')=value

    ChoiceItem = Sequence | SequenceItem

    OrderedChoice                   = (ChoiceItem % '|')=value
    OrderedMultipleChoice           = (ChoiceItem % '|~')=value
    UnorderedMultipleChoice         = (ChoiceItem % '|+')=value
    OptionalUnorderedMultipleChoice = (ChoiceItem % '|*')=value

    Choice = OrderedChoice | OrderedMultipleChoice |
             UnorderedMultipleChoice  | OptionalUnorderedMultipleChoice

    UnjoinedSequenceItem = Choice | ChoiceItem
    UnjoinedSequence = (UnjoinedSequenceItem % '~')=value

    Value = UnjoinedSequence | UnjoinedSequenceItem

    begin = Value:value
}

Attribute {
    key name = AttributeName
    enum prefix = 'key' | ('local' |* 'skip')

    begin = prefix name '=' > value=Expression
}

Class {
    key name    = ClassName
    contents    = (Class | Attribute)+
    enum prefix = 'skip' | 'enum'

    begin = prefix className ~ '=' > Expression | '{' >> contents '}'
}

Global = Class*
