@module std

class type[T] {
    sizeof ?: __internal[size_t]

    def subclass_of[U]          ?: __internal[bool]
    def superclass_of[U]        ?: __internal[bool]
    def direct_subclass_of[U]   ?: __internal[bool]
    def direct_superclass_of[U] ?: __internal[bool]
}

class not_class {
    def subclass_of[U]          ?: false
    def superclass_of[U]        ?: false
    def direct_subclass_of[U]   ?: false
    def direct_superclass_of[U] ?: false
}

// ? inheritance allows the type meta-function specialisations in
// not_class to apply to type[:void]
class type[:void] ? not_class {
    sizeof ?: 0
}

// specialisation for functions
class type[F : def (A...)?R] ? not_class {
    return_type        ?: R
    arguments_type     ?: A
}

class type[uint T] ? not_class {
    value ?: T
}
