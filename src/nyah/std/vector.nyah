@include std/memory
@module std

class vector[T] {
    value_type    ?: T
    iterator_type ?: T*

    def begin() = data_
    def end()   = data_ + size - 1

    // & forces the return type to be a reference
    def front():& = *begin()
    def back():&  = *end()

    def resize(newSize:size_t) {
        if (newSize < capacity * 2) {
            do {
                capacity /= 2
            } while (newSize < capacity * 2)
        }
        else if (newSize > capacity) {
            do {
                capacity *= 2
            } while (newSize > capacity)
        }
        else return

        reallocate(data_, capacity)
    }

    def self() {
        data_ = null
        size = 0
        capacity = 0
    }

    def self(a:const T) {
        // if a function has only one type argument or argument then brackets
        // are not needed to call it e.g. new...
        data_ = new T
        size = 1
        capacity = 1
    }

    // move constructor
    def self(a:vector[T]&&) {
        data_ = a.data_
        capacity = a.capacity
        size = a.size
        a.data_ = 0
    }

    def push_back(a:const T) {
        if (size == capacity - 1) {
            reallocate(data_, capacity *= 2)
        }
        copy(end(), a)
        ++size
    }

    def operator()(n:size_t):& = *(data_ + n * sizeof T)

    size     :uint
    capacity :size_t
  private:
    data_    :T*
}
