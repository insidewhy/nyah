beard.variant.Variant {
    mousedeer.parser.nyah.Function,
    mousedeer.parser.nyah.VariableDefinition
}[] => [
    Function: (
        "def",
        "empty",
        [],
        []
    ),
    Function: (
        "override",
        "add",
        [
            (
                "a",
                TypeParameter: (
                    :,
                    [
                        "int"
                    ]
                )
            ),
            (
                "b",
                TypeParameter: (
                    :,
                    [
                        "int"
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "add",
        [
            (
                "a",
                TypeParameter: (
                    :,
                    [
                        "const",
                        "vector",
                        "int"
                    ]
                )
            ),
            (
                "b",
                TypeParameter: (
                    :,
                    [
                        "int"
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "add",
        [
            (
                "p",
                TypeParameter: (
                    :,
                    [
                        "pair",
                        [
                            TypeParameter: [
                                "A"
                            ],
                            TypeParameter: [
                                "B"
                            ]
                        ]
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "add",
        [
            (
                "p",
                TypeParameter: (
                    :,
                    [
                        "pair",
                        [
                            TypeParameter: (
                                :,
                                [
                                    "bool"
                                ]
                            ),
                            TypeParameter: [
                                (
                                    "?",
                                    "B"
                                )
                            ]
                        ]
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec1",
        [
            (
                "a",
                TypeParameter: (
                    :,
                    [
                        "vector",
                        (
                            "?",
                            "A"
                        )
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec2",
        [
            (
                "a",
                TypeParameter: (
                    :,
                    [
                        "vector",
                        (
                            "?",
                            ""
                        )
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec3",
        [
            (
                "a",
                TypeParameter: (
                    :,
                    [
                        "vector",
                        (
                            "...",
                            "A"
                        )
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec4",
        [
            (
                "a",
                TypeParameter: [
                    (
                        "?",
                        "T"
                    ),
                    [
                        TypeParameter: (
                            :,
                            [
                                "bool"
                            ]
                        )
                    ]
                ]
            )
        ],
        []
    )
]
