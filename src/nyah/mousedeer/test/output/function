ast beard.variant.Variant {
    mousedeer.parser.nyah.Function,
    mousedeer.parser.nyah.VariableDefinition,
    mousedeer.parser.nyah.Class,
    mousedeer.parser.nyah.Module
}[] => [
    Function: (
        "def",
        "empty",
        [],
        [],
        CodeBlock: []
    ),
    Function: (
        "override",
        "add",
        [],
        [
            (
                "a",
                TypeMatch: (
                    ":",
                    "int"
                ),
                null
            ),
            (
                "b",
                TypeMatch: (
                    ":",
                    "int"
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "add",
        [],
        [
            (
                "a",
                TypeMatch: ParametricTypeMatch: (
                    (
                        ":",
                        "const"
                    ),
                    ParametricTypeMatch: (
                        "vector",
                        "int"
                    )
                ),
                null
            ),
            (
                "b",
                TypeMatch: (
                    ":",
                    "int"
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "add",
        [],
        [
            (
                "p",
                TypeMatch: ParametricTypeMatch: (
                    (
                        ":",
                        "pair"
                    ),
                    [
                        TypeMatch: "A",
                        TypeMatch: "B"
                    ]
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "add",
        [],
        [
            (
                "p",
                TypeMatch: ParametricTypeMatch: (
                    (
                        ":",
                        "pair"
                    ),
                    [
                        TypeMatch: (
                            ":",
                            "bool"
                        ),
                        TypeMatch: (
                            "?",
                            "B"
                        )
                    ]
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "vec1",
        [],
        [
            (
                "a",
                TypeMatch: ParametricTypeMatch: (
                    (
                        ":",
                        "vector"
                    ),
                    (
                        "?",
                        "A"
                    )
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "vec2",
        [],
        [
            (
                "a",
                TypeMatch: ParametricTypeMatch: (
                    (
                        ":",
                        "vector"
                    ),
                    (
                        "?",
                        ""
                    )
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "vec3",
        [],
        [
            (
                "a",
                TypeMatch: ParametricTypeMatch: (
                    (
                        ":",
                        "vector"
                    ),
                    (
                        "...",
                        "A"
                    )
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "vec4",
        [],
        [
            (
                "a",
                TypeMatch: ParametricTypeMatch: (
                    (
                        "?",
                        "T"
                    ),
                    [
                        TypeMatch: (
                            ":",
                            "bool"
                        )
                    ]
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "vec5",
        [],
        [
            (
                "a",
                TypeMatch: ParametricTypeMatch: (
                    (
                        "?",
                        "T"
                    ),
                    (
                        ":",
                        "bool"
                    )
                ),
                null
            )
        ],
        CodeBlock: []
    ),
    Function: (
        "def",
        "tpar",
        [
            (
                TypeMatch: "H",
                null
            ),
            (
                TypeMatch: (
                    "...",
                    "T"
                ),
                null
            )
        ],
        [],
        CodeBlock: []
    ),
    Function: (
        "def",
        "puu",
        [
            (
                TypeMatch: "H",
                Type: ParametricType: (
                    "vector",
                    "int"
                )
            )
        ],
        [],
        CodeBlock: []
    )
]
global {
  vec4: function - parent [module global]
  puu: function - parent [module global]
  empty: function - parent [module global]
  add: function - parent [module global]
  vec1: function - parent [module global]
  vec5: function - parent [module global]
  tpar: function - parent [module global]
  vec2: function - parent [module global]
  vec3: function - parent [module global]
}
