beard.variant.Variant {
    mousedeer.parser.nyah.Function,
    mousedeer.parser.nyah.VariableDefinition
}[] => [
    Function: (
        "def",
        "empty",
        [],
        [],
        []
    ),
    Function: (
        "override",
        "add",
        [],
        [
            (
                "a",
                Type: (
                    ":",
                    "int"
                )
            ),
            (
                "b",
                Type: (
                    ":",
                    "int"
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "add",
        [],
        [
            (
                "a",
                Type: ParametricType: (
                    (
                        ":",
                        "const"
                    ),
                    Type: ParametricType: (
                        "vector",
                        Type: "int"
                    )
                )
            ),
            (
                "b",
                Type: (
                    ":",
                    "int"
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "add",
        [],
        [
            (
                "p",
                Type: ParametricType: (
                    (
                        ":",
                        "pair"
                    ),
                    Type: [
                        Type: "A",
                        Type: "B"
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "add",
        [],
        [
            (
                "p",
                Type: ParametricType: (
                    (
                        ":",
                        "pair"
                    ),
                    Type: [
                        Type: (
                            ":",
                            "bool"
                        ),
                        Type: (
                            "?",
                            "B"
                        )
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec1",
        [],
        [
            (
                "a",
                Type: ParametricType: (
                    (
                        ":",
                        "vector"
                    ),
                    Type: (
                        "?",
                        "A"
                    )
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec2",
        [],
        [
            (
                "a",
                Type: ParametricType: (
                    (
                        ":",
                        "vector"
                    ),
                    Type: (
                        "?",
                        ""
                    )
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec3",
        [],
        [
            (
                "a",
                Type: ParametricType: (
                    (
                        ":",
                        "vector"
                    ),
                    Type: (
                        "...",
                        "A"
                    )
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec4",
        [],
        [
            (
                "a",
                Type: ParametricType: (
                    (
                        "?",
                        "T"
                    ),
                    Type: [
                        Type: (
                            ":",
                            "bool"
                        )
                    ]
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "vec5",
        [],
        [
            (
                "a",
                Type: ParametricType: (
                    (
                        "?",
                        "T"
                    ),
                    Type: (
                        ":",
                        "bool"
                    )
                )
            )
        ],
        []
    ),
    Function: (
        "def",
        "tpar",
        [
            Type: "H",
            Type: (
                "...",
                "T"
            )
        ],
        [],
        []
    )
]
