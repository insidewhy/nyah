mousedeer.parser.nyah.Function[] => [
    Function: (
        "def",
        "hey",
        [],
        [
            Expression: AssigningOp: joined [
                "hello"
                "*="
                AndOp: [
                    AdditionOp: joined [
                        RealNumber: (
                            "12",
                            "1"
                        )
                        +
                        ScalingOp: joined [
                            "b"
                            *
                            "a"
                        ]
                    ],
                    "c"
                ]
            ],
            Expression: ReturningOp: (
                =,
                RealNumber: (
                    "14",
                    "4"
                )
            ),
            Expression: AdditionOp: joined [
                "a"
                +
                "b"
            ],
            Expression: FunctionCall: [
                "c",
                Expression: TupleOp: [
                    Integer: "1",
                    Integer: "2"
                ]
            ],
            Expression: AdditionOp: joined [
                ScalingOp: joined [
                    "x"
                    *
                    Character: y
                ]
                +
                "c"
            ],
            Expression: FunctionCall: [
                "d",
                Integer: "4",
                Integer: "5"
            ],
            Function: (
                "def",
                "famon",
                [],
                Expression: ReturningOp: (
                    =,
                    AdditionOp: joined [
                        "a"
                        +
                        String: "conka"
                    ]
                )
            ),
            Expression: SuffixOp: (
                "x",
                "++"
            ),
            Expression: PrefixOp: (
                "++",
                "y"
            ),
            Expression: AdditionOp: joined [
                SuffixOp: (
                    "x",
                    "++"
                )
                -
                PrefixOp: (
                    "++",
                    "y"
                )
            ],
            Expression: MemberCallOp: (
                "m",
                .,
                [
                    "single",
                    Integer: "1"
                ]
            ),
            Expression: FunctionCall: [
                "m",
                "single",
                Integer: "1"
            ],
            Expression: MemberCallOp: (
                "m",
                .,
                [
                    "double",
                    Expression: TupleOp: [
                        Integer: "1",
                        Integer: "2"
                    ]
                ]
            ),
            Expression: FunctionCall: [
                "m",
                "double",
                Expression: TupleOp: [
                    Integer: "1",
                    Character: "\'"
                ]
            ],
            Expression: AdditionOp: joined [
                Integer: "14"
                +
                PrefixOp: (
                    "++",
                    "a"
                )
            ],
            Expression: AssigningOp: joined [
                TupleOp: [
                    "a",
                    "b"
                ]
                =
                TupleOp: [
                    "c",
                    "d"
                ]
            ],
            Expression: AssigningOp: joined [
                TupleOp: [
                    "a",
                    OrOp: [
                        "b",
                        "c"
                    ],
                    "d"
                ]
                =
                TupleOp: [
                    "e",
                    "f",
                    "g"
                ]
            ],
            Expression: ReturningOp: (
                =,
                FunctionCall: [
                    "famon",
                    String: "willy \"stringboy\" williamson"
                ]
            )
        ]
    )
]
