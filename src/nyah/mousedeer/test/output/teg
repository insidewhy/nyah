sequence: teg.range.Range => "friend"
sequence2: std.typecons.Tuple!(Range,Range).Tuple => (
    "friend",
    "baby"
)
many list: teg.range.Range[] => [
    "v1",
    "v2"
]
lexeme: teg.range.Range[] => [
    "v1",
    "v2"
]
store range: teg.range.Range => "var v1"
joined: teg.range.Range[] => [
    "hey",
    "baby"
]
joined 2: std.typecons.Tuple!(Range,Range[],Range[]).Tuple[] => [
    (
        "add",
        [
            "a",
            "b",
            "c"
        ],
        [
            "a1",
            "b1"
        ]
    ),
    (
        "pump",
        [],
        []
    )
]
choice 1: char => v
choice 2: beard.variant.Variant!(Tuple!(Range,Range),Tuple!(Range,Range[],Tuple!(Range,Range)[])).Variant[] => [
    (
        "outer",
        <unset>
    ),
    (
        "add",
        [
            "a",
            "b",
            "c"
        ],
        [
            (
                "a1",
                "23"
            ),
            (
                "b1",
                <unset>
            )
        ]
    ),
    (
        "pump",
        [],
        [
            (
                "_t",
                <unset>
            )
        ]
    )
]
node 1: mousedeer.test.basic.Id[] => [
    mousedeer.test.basic.Id: "kitten",
    mousedeer.test.basic.Id: "friend",
    mousedeer.test.basic.Id: "yeah"
]
