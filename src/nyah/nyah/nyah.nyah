grammar "nyah"

IdentifierTail <- [A-Za-z0-9_]*

ClassName      <- [A-Z] ^ IdentifierTail
AttributeName  <- [a-z] ^ IdentifierTail

SpecialCharacter <- '\' [?\!\[\]\.()'"\\nrst'"]
Character <- SpecialCharacter | "'" !\' "'" | '"' !\" '"'
StringMatch <- \' .*? \' | \" .*? \"

MutableSpecialCharacter <- '\' [wWSdD] | '.'
CharacterRange <- '[' (SpecialCharacter|.)+? ']'
MutableCharacter <- CharacterRange | MutableSpecialCharacter

ActionBody {
    // TODO
}

Expression {

    Value <- 
        // >| erases the current type from all "self" matches on its left hand side.
        '(' self ')' |
        Match:             '&' self >|
        Not:               '!' self >|
        ( Many:              self '*'  |
          ManyJoined:        self '^*' |
          AtLeastOne:        self '+'  |
          AtLeastOneJoined:  self '+')  >|
        Optional:          self '?'  >|
        Until:             self '*' '?' self >|
        AtLeastOneUntil:   self '+' '?' self >|
        AlternateConstruction: ClassName '->' AttributeName >|
        AttributeStore:    self '=' AttributeName  >|
        Except:            self - self >|
        Joined:            self '%' self >|
        Named:             self 'named' QuotedString >|
        As:                self 'as' ClassName >|
        Lexeme:            self % '^'  >|
        Mustclass:         '>' '>' self >|
        Must:              '>' self >|
        // TODO: fill the below in
        Action:            self '{' ActionBody '}' >|
        Sequence:          self+ >|
        ClassName |
        AttributeName

    match <- Value:value
}

Attribute {
    key name <- AttributeName
    enum prefix <- 'key' | ('local' |* 'skip')

    match <- prefix name '=' > value=Expression
}

Class {
    key name    <- ClassName
    contents    <- (Class | Attribute)+
    enum prefix <- 'skip' | 'enum'

    match <- prefix className ~ '=' > Expression | '{' >> contents '}'
}

GrammarDefinition {
    match <- 'grammar' name=QuotedString
}

Global <- GrammarDefinition Class*
