skip WhitespaceNoNewlines = [ \t]+

skip Whitespace = \s+
skip Comment = '//' !\n*
Identifier = [_a-zA-Z]^[_a-zA-Z0-9]*

RawString = (
    '$' { fail("expected function declaration or variable assignment") } |
    . )*

StringNode = \" > !\"* \" | \' > !\'* \'

Number = [0-9]+

SimpleNode = TextNode | HtmlNode | StringNode | RawString
Node = SimpleNode | VariableDefinition | MasterHtmlNode as HtmlNode | Yield
HeadNode = Node | MacroDefinition

HtmlArgumentValue = StringNode | [!,)]+

HtmlNodeArgument = (name:Identifier '=')? value:HtmlArgumentValue

HtmlNode {
    children = '{' > Node* '}'
    arguments = '(' > (HtmlNodeArgument % ','?)? ')'
    nodeName = Identifier

    begin = nodeName children |
            ( '%' > nodeName arguments? |
              nodeName arguments > ) ~
            ( ^ WhitespaceNoNewlines ^ (children as SimpleNode | children?))

}

MasterHtmlNode : HtmlNode =
    '!' > nodeName arguments? ~ \n children:Node*

TextNode = '<<' > ^ local textMarker:Identifier \n ~
            .*? \n ^ matched(textMarker)

Yield = 'yield' > argument:Identifier

MacroDefinition {
    arguments = '(' > (Identifier % ',')? ')'
    header = '$function' > name:Identifier arguments?

    children = Node*

    begin = '!' header children |
            header '{' children '}'
}

Expression = Number | StringNode

// var Expression equivalent to expression:Expression
VariableDefinition = '$' name:Identifier '=' > var Expression

Global = HeadNode*
