skip WhitespaceNoNewlines = [ \t]+

skip Whitespace = \s+
skip Comment = '//' !\n*
Identifier = [_a-zA-Z][_a-zA-Z0-9]*

RawString = 
    ( fail('$', "expected function declaration or variable assignment") | . )*

inline StringNode = \" create !\"* \" | \' create !\'* \'

Number = [0-9]+

SimpleNode = TextNode | HtmlNode | StringNode | RawString
Node = SimpleNode | VariableDefinition | MasterHtmlNode
HeadNode = Node | MacroDefinition

HtmlArgumentValue = StringNode | [!,)]+

HtmlNodeArgument = (name:Identifier '=')? value:HtmlArgumentValue

HtmlNode {
    children = '{' create Node* '}'
    arguments = '(' create (HtmlNodeArgument % ','?)? ')'
    nodeName = Identifier

    // since children already exists as a declared member :SimpleNode will "cast"
    // it by parsing only an Node and storing it in the children member
    // (for this to work the cast type must be an expression that the type
    //  cast from would also match)
    begin = nodeName children |
            ( '%' create nodeName arguments? |
              nodeName arguments create )
            ( ^ WhitespaceNoNewlines ^ children:SimpleNode | children?)
            
}

// ?: means this node will be identical to the HtmlNode type and also have the
//    same type identifier (it exists just to help the grammar out)
MasterHtmlNode ?: HtmlNode =
    '!' nodeName arguments? ~ \n create ~
        children:Node*

// skip a named parameter means the parameter can be used by name during
// the current parse but is not stored in the object.
TextNode = '<<' ^ create skip textMarker:Identifier \n ~
            skip (. - (\n ^ matched textMarker))*

Yield = 'yield' create argument:Identifier

MacroDefinition {
    arguments = '(' create (Identifier % ',')? ')'
    header = '$function' create name:Identifier arguments?

    children = (Node | Yield)*
    begin = '!' header children |
            header '{' children '}'
}

Expression = Number | StringNode

// var Expression equivalent to expression:Expression
VariableDefinition = '$' name:Identifier '=' create var Expression

Global = children:HeadNode*
