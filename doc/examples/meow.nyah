WhitespaceNoNewlines {
    begin = [ \t]+
}

Whitespace {
    begin = [ \t\n]+
}

Comment {
    begin = '//' (!\n)*
}

Identifier = [_a-zA-Z][_a-zA-Z0-9]*

String {
    begin = ('"' self (!'"')* '"') |
            ('\'' self (!'\'')* '\'')
}

Number {
    self begin = [0-9]+
}

Node = TextNode | HtmlNode | StringNode | VariableDefinition

NodeChildren {
    var begin = Node*
}

HeadNode : Node {
    begin = Macro | super
}

HeadNodeChildren {
    var begin = HeadNode*
}

HtmlNode {
    children:NodeChildren = '{' value '}'

    # since children already exists as a declared member :HtmlNode will "cast"
    # it by parsing only an Node and storing it in the children member
    # (for this to work the cast type must be an expression that the type
    #  cast from would also match)
    # must expression triggers global error
    begin = (marker:Identifier children) |
            ('%' must marker:Identifier "expected identifier after %" (
                ^ WhitespaceNoNewlines ^ children:Node | 
                children?))
            
}

TextNode {
    begin = '<<' ^ textMarker:Identifier self Until(\n ^ textMarker)
}

StringNode {
}

Macro {
}

Expression {
    self begin = (Number | String)
}

VariableDefinition {
    # var Expression equivalent to expression:Expression
    begin = '$' name:Identifier '=' var Expression
}

Global {
    var begin = children:HeadNodeChildren
}
