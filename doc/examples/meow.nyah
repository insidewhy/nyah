WhitespaceNoNewlines {
    begin = [ \t]+
}

Whitespace {
    begin = [ \t\n]+
}

Comment {
    begin = '//' (!\n)*
}

Identifier {
    self begin = [_a-zA-Z] ^ [_a-zA-Z0-9]*
}

String {
    begin = ('"' self (!'"')* '"') |
            ('\'' self (!'\'')* '\'')
}

Number {
    self begin = [0-9]+
}

Node {
    self begin = (Node | Macro | VariableDefinition)
}

NodeChildren {
    var begin = Node*
}

HtmlNode {
    children:NodeChildren = '{' value '}'

    # since children already exists as a declared member, :Node will "cast"
    # it by parsing only an Node and storing it in the children member
    # (for this to work the cast type must be an expression that the type
    #  cast from would also match)
    begin = marker:Identifier children |
            '%' marker:Identifier (
                ^ WhitespaceNoNewlines ^ children:Node
                | children
            )
}

TextNode {
}

Node {
    self begin = TextNode | HtmlNode | String
}

Macro {
}

Expression {
    self begin = (Number | String)
}

VariableDefinition {
    # var Expression equivalent to expression:Expression
    begin = '$' name:Identifier '=' var Expression
}

Global {
    var begin = children:NodeChildren
}
