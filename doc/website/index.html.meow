!html
head {
    %title nyah - open source community language
    link(rel=stylesheet, type=text/css, href=css/global.css)
}

!body

%h1 Nyah

#links {
    links:
    %a(href=http://github.com/tuxjay/nyah) source
    %a(href=introduction/index.html) introduction
    %a(href=cplusplus.html) nyah vs c++(0x)
    %a(href=#status) status
}

%p { Nyah is a programming language designed to allow code to be written that performs as well as or better than traditional systems languages like C and C++ but with the expressiveness of a scripting language like python or ruby. Nyah is typed, but uses type inference so types can usually be omitted. Nyah has strong meta-programming capabilities. It uses the | %a(href=http://llvm.org) LLVM | compiler infrastructure to generate object code.   The grammar of nyah can be modified at compile time to allow diverging opinions to be expressed within the same language and to take DSL building capabilities to the next level. }

%h2 Goals
%ul {
    %li Improve the meta-programming capabilities of C++0x/D/Nemerle whilst simplifying the syntax.
    %li Better type inference than Scala/D.
    %li Provide a fast and free MIT licensed compiler implementation.
    %li Provide a powerful and intelligent compiler which will infer information to save developers from repetitive typing when safe to do so.
    %li Optional garbage collection. Nyah should target both the JVM (and/or the CLR) and the LLVM to allow it to be used both with and without a garbage collector. Currently only an LLVM implementation is being worked on.
    %li Support object orientated (including multiple inheritance), meta, functional and declarative programming styles.
}

%h2 Syntax can be extended/modified at compile time.

%p New features can be added to the language and the compiler from within nyah code itself. This not only allows many powerful features to be expressed neatly in the language, but makes nyah an ideal "compiler toolkit". It is conceivable to import the syntax of a pre-existing language into nyah, for example, the nyah grammar module allows PEG based parsers to be expressed directly in a PEG based notation within the language. This variant of PEGs allows AST building capabilities to be expressed with the parsing grammar. This allows powerful modifications and extensions to be expressed in a concise way. The nyah parser itself is implemented with this module which allows extensions and modifications to the core language to be made with reasonable ease and flexibility.

%h2 Fast, powerful, non-verbose meta-programming

%p Whilst the goals are ambitious the nyah compiler achieves them neatly by approaching compilation in a unique way. The compiler outputs assembly code during the compilation process to allow it to run meta-functions and interpret grammar modifications quickly. Whilst this approach adds another layer of indirection which would make the compilation of traditional code slightly slower, it allows code that takes advantage of meta-programming to be compiled very quickly. It also allows type inference to be more powerful than a language like scala. In nyah even functions that recursively call other meta-functions can benefit from return type inference.

%p { Please read the | a(href=introduction/index.html) "introduction." }

%h2#status Status

%h3 Parser generator
%ul.status {
    %li { .completed completed | Research new notation to extend PEG to include &ldquo;AST-building&rdquo; parsers. Read paper | a(href=http://chilon.net/papers/tbpeg.pdf) TBPEGs }
    %li { .completed completed | chilon::parser, a C++0x implementation of TBPEGs, to be used in the bootstrap compiler. Project website | a(href=http://chilon.net/library.html) chilon::parser }
    %li { .completed completed | a(href=http://chilon.net/nyu)nyu parser generator | which implements the nyah grammar syntax and will be used to boostrap nyah. Note that the nyu language is a subset of the nyah language, and is already capable of bootstrapping itself. }
}

%h3 First compiler (written in C++0x) to be used for bootstrapping
%ul.status {
    %li { .inprogress in progress | mousedeer: full nyah language parser using parser generator. }
    %li { .yettostart yet to start | Code generator using LLVM. }
}

%h3 Nyah standard library
%ul.status {
    %li { .inprogress in progress | "std.variant and std.tuple." }
    %li { .inprogress in progress | containers: vector, vector_hash_map, hash_map, hash_set, set, map. }
    %li { .inprogress in progress | nyah meta-programming library. }
    %li { .yettostart yet to start | std.config argument parser. }
}

%h3 Second compiler (written in nyah)
%ul.status {
    %li { .yettostart yet to start | "nyah.parser based on chilon::parser." }
    %li { .yettostart yet to start | TBPEG nyah syntax which will internally be based on nyah.parser. }
    %li { .yettostart yet to start | Use nyah syntax from bootstrap compiler to produce full parser. }
    %li { .yettostart yet to start | LLVM library for nyah based on LLVM C bindings. }
    %li { .yettostart yet to start | Code generator using llvm library. }
    %li { .yettostart yet to start | Java bytecode output library for nyah. }
    %li { .yettostart yet to start | Code generator for garbage collected nyah using java bytecode library. }
}

%h2 Help wanted

%p Help is appreciated from anyone with research, implementation or art. Criticisms and suggestions for how to improve or modify the language will be welcomed.
%p {
    Here are some ideas for things to contribute:
    %ul {
        %li Coroutines
        %li Internationalisation
        %li Optimised hashed standard containers
        %li Red-black tree maps
        %li Multi-index container library
        %li Asynchronous IO library
    }
}
%div E-mail: nyah (@) chilon.net.
%div { IRC Channel: #nyah on | %a(href=irc://irc.freenode.net/nyah) "irc.freenode.net" }
