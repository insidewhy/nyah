!html
head {
    %title nyah - introduction - metafunctions
    link(rel=stylesheet, type=text/css, href=../css/global.css)
}

!body

%h2 Metafunctions

%p Metafunctions allow types to be derived from other types at compile time. All metafunctions take one or more type arguments and return a new type. Nyah classes can have &ldquo;companion meta-functions&rdquo; which can be used to filter the types passed to a class. The following block of code demonstrates how to ensure the types in a &ldquo;set&rdquo; are unique by using a companion meta-function.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF

meta if[C, T, U] : T

// Unliked C++ meta-functions have access to all primitive types e.g.
//    bool[false], bool[true], int[1], float[1.0]
// When use in type context, 1 = int[1], true = bool[true] etc.

// :false is used to specialise the first argument of `if' on :false
meta if[:false, T, U] : U

// A class with no body is great for passing compile-time data between
// meta-functions.
class set[...T]

// If a metafunction with the same name as a class is created, then the
// metafunction becomes a companion function of the class, and type[...] can be
// used within the metafunction to reference the companion class. In this case
// the companion meta-function ensures whenever a set is created that
// duplicates are removed from its parameter list.
meta set[type[...R]] : type[R...]

meta set[type[...R], H, ...T] :
    set[
        if[ std.contains[H, R...], type[R...], type[R..., H] ],
        T...
    ]

meta set[H, ...T] : set[type[H], T...]

// ?: creates a type alias at compile time, like a typedef in c++
a_set ?: set[bool, int, float, int]

// sizeof... calculates the size of a template pack, sizeof..* calculates the
// number of template arguments belonging to a type. In this case this_is_3
// will alias uint[3].
this_is_3 ?: sizeof..*[a_set]

// ... expands types in a template pack, ..* expands the arguments of a
// template parameter. In this case a_list will alias
//     list[bool, int, float, float].
a_list ?: list[a_set..*, float]
EOF

%p In type matching syntax &ldquo;:&rdquo; prefix means that all types and types of arguments are names of types rather than placeholders. Essentially it causes the matching mechanism to be identical to the one used for argument type matching in functions. The following are equivalent:

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    class python[T]

    meta is_snake[:python[?]] : true

    // :T also fills in missing template parameters for T if they are
    // not specified.
    meta is_snake[:python] : true
EOF

%p When &ldquo;:&rdquo; is not used before a type parameter then whether a type (or its possible arguments) is a placeholder depends on whether it has arguments or not. A type parameter with no arguments becomes a placeholder (unless prefixed with &ldquo;:&rdquo;) and a type parameter with arguments becomes a type name (unless prefixed with &ldquo;?&rdquo;). The following meta-functions are identical to each other:

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    // ":" is used before "python" so it and all arguments are type names
    // rather than placeholders unless prefixed with ?.
    meta is_snake[:python[?]] : true  // as before

    // "python" has arguments so is equivalent to ":python"
    meta is_snake[python[?A]] : true

    // A has no arguments so is equivalent to ?A.
    meta is_snake[python[A]] : true

    // "T U" is a shorthand for "T[U]"
    meta is_snake[python A] : true
EOF

%p When a type parameter refers to a previously named type parameter, the &ldquo;:&rdquo; prefix is optional and the parameter has the effect of restricting that parameter's type rather than creating a new placeholder. The following are equivalent:

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    // Specify it very clearly.
    meta same[?A, :A] : true

    // A is same as A in ?A so second : is not necessary.
    meta same[?A, A] : true

    // A has no arguments so is equivalent to ?A the first time it is used.
    meta same[A, A] : true

    // Be a bit more clear than above.
    meta same[A, :A] : true

    // Compiler error attempting to introduce placeholder with same name as
    // prior placeholder.
    meta same[?A, ?A] : true
EOF

%p Meta-functions can be defined inside a class. This is identical to defining the meta-function outside of a class with a first type argument which matches the type of the class. Inside the meta-function argument list &ldquo;:this&rdquo; can be used to refer to the type of the class.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    class animal {
        meta is_friendly : true
        meta is_same[:this] : true
        meta is_same[T] : false
    }

    // the following meta-functions are equivalent to the above.
    meta is_friendly[:animal] : true
    meta is_same[:animal, :animal] : true
    meta is_same[:animal, T] : false
EOF

%a(href=variadic.html) previous | " | " | %a(href=index.html) up | " | " | %a(href=typematch.html) next
