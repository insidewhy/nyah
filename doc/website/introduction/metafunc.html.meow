!html
head {
    %title nyah - introduction - metafunctions
    link(rel=stylesheet, type=text/css, href=../css/global.css)
}

!body

%h2 Metafunctions

%p Metafunctions allow compile time modifications of types. All metafunctions take one or more type arguments and return a new type (which could possibly be one of the argument types). Nyah classes can have &ldquo;companion meta-functions&rdquo; which can be used to filter the types passed to a class. The following block of code demonstrates how to ensure the types in a &ldquo;set&rdquo; are unique by using a companion meta-function.

%pre <<EOF

meta if[C, T, U] : T

// Unliked C++ meta-functions have access to all primitive types e.g.
//    bool[false], bool[true], int[1], float[1.0]
// When use in type context, 1 = int[1], true = bool[true] etc.

// :false is used to specialise the first argument of `if' on :false
meta if[:false, T, U] : U

// A class with no body is great for passing compile-time data between
// meta-functions.
class set[...T]

// If a metafunction with the same name as a class is created, then the
// metafunction becomes a companion function of the class, and type[...] can be
// used within the metafunction to reference the companion class. In this case
// the companion meta-function ensures whenever a set is created that
// duplicates are removed from its parameter list.
meta set[type[...R]] : type[R...]

meta set[type[...R], H, ...T] :
    set[
        if[ std.contains[H, R...], type[R...], type[R..., H] ],
        T...
    ]

meta set[H, ...T] : set[type[H], T...]

// ?: creates a type alias at compile time, like a typedef in c++
a_set ?: set[bool, int, float, int]

// sizeof... calculates the size of a template pack, sizeof* calculates the
// number of template arguments belonging to a type. In this case this_is_3
// will alias uint[3].
this_is_3 ?: sizeof*[a_set]

// ... expands types in a template pack, ..* expands the arguments of a template
// parameter.In this case a_list will alias
//     list[bool, int, float, float].
a_list ?: list[a_set..*, float]
EOF

%a(href=variadic.html) previous | " | " | %a(href=typematch.html) next
