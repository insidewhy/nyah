!html
head {
    %title nyah - introduction - operators and operator overloading
    link(rel=stylesheet, type=text/css, href=../css/global.css)
    link(rel=stylesheet, type=text/css, href=../css/operators.css)
}

!body

%h2 Operators and Operator Overloading

%p In nyah operator overloading isn't strictly necessary. Instead method and function names can be composed of symbols. Functions with single arguments and methods with zero arguments can be used as prefix operators. Functions with two arguments and methods with a single argument can be used as infix operators. Readers familiar with Scala will notice many similarities.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
class IntCopy(public value:int = 0) {
    def -(o:const IntCopy)   = IntCopy(value - o.value)
    def +(o:const IntCopy)   = IntCopy(value + o.value)
    def ! : bool           = ! value

    // alternates in words
    def plus(o:const IntCopy)  = this + o
    def minus(o:const IntCopy) = this - o
    def not = ! this
}

i4 := IntCopy(4)
i7 := i4 + IntCopy(3)
i0 := i7 minus IntCopy(7)
assert(! (! i7))
assert(not i0)
EOF

%h2 Operator Precedence

%p Standard operators (+, -, +=, == etc.) maintain the same precedence as C++. The precedence of any newly defined operator is equivalent to the precedence of the operator composed from the first symbol in the new operator's name. If the first symbol does not constitute a valid operator then the precedence is &ldquo;0&rdquo;. In the case of multiple operators in a row with the same precedence, odd precedences are evaluated left-to-right and even precedences are evaluated right-to-left.

Examples of operators with equivalent precedence:
%table {
    %tr {
        %td a +++ b
        %td a + b
    }
    %tr {
        %td a +&gt; b
        %td a + b
    }
    %tr {
        %td a ** b
        %td a * b
    }
    %tr {
        %td +&gt;a
        %td +a
    }
    %tr {
        %td ---a
        %td "-a  // not --a"
    }
}

Examples of operators with precedence of 0:
%table {
    %tr %td a cmp b
    %tr %td a begins_without_symbol b
    %tr %td a \ b
    %tr %td a \= b
    %tr %td definitely_not a
}

Default operator precedences:
%table#op-precedence {
    %tr {
        %td infinite
        %td {
            %span ::
        }
    }
    %tr {
        %td 7
        %td {
            %span x++
            %span x--
            %span -&gt;
            %span "."
        }
    }
    %tr {
        %td 6
        %td {
            %span ++x
            %span --x
            %span +x
            %span -x
            %span *x
            %span &amp;x
            %span sizeof
            %span new
            %span delete
        }
    }
    %tr {
        %td 5
        %td {
            %span *
            %span /
            %span "%"
        }
    }
    %tr {
        %td 3
        %td {
            %span x+y
            %span x-y
        }
    }
    %tr {
        %td 1
        %td {
            %span &lt;&lt;
            %span &gt;&gt;
        }
    }
    %tr {
        %td 0
        %td {
            %span fn x
            %span x fn y
        }
    }
    %tr {
        %td -1
        %td {
            %span &lt;
            %span &lt;=
            %span &gt;
            %span &gt;=
        }
    }
    %tr {
        %td -3
        %td {
            %span ==
            %span "!="
        }
    }
    %tr {
        %td -5
        %td %span x&amp;y
    }
    %tr {
        %td -7
        %td %span ^
    }
    %tr {
        %td -9
        %td %span &amp;&amp;
    }
    %tr {
        %td -11
        %td %span "||"
    }
    %tr {
        %td -12
        %td {
            %span +=
            %span -=
            %span *=
            %span /=
            %span "%="
            %span &lt;&lt;=
            %span &gt;&gt;=
            %span &amp;=
            %span ^=
            %span "|="
        }
    }
}

%h2 Overriding Operator Precedence

%p Operator precedence can be modified from the default by putting an integer between -2<sup>16</sup> and 2<sup>16</sup> in between the &ldquo;def&rdquo; and the method name. For any binary operator the precedence must be the same for all possible overloaded methods.

%p The following example shows how to make an integer class where &ldquo;+&rdquo; has the same precedence as &ldquo;*&rdquo;:

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
class MyInt(value:int = 0) : int(value) {
    // increase priority of infix + to that of infix *
    def 5 +(o:const int) = MyInt(super + o)
}

i2 := MyInt(2)
i5 := MyInt(5)
i7 := MyInt(7)

// Affects bracketing of MyInt types.
assert( (i2 + i5 * i7) == ((i2 + i5) * i7) )
EOF

%h2 Preventing Ambiguous Operator Precedence

%p Allowing any operators to have varying precedence without restriction would create ambiguities that the compiler may not always be able to resolve. For example in the expression (a + b * c / d), the result of (a + b) may not have the same type as either &ldquo;a&rdquo; or &ldquo;b&rdquo;. The right-hand side type of &ldquo;+&rdquo; itself relies on the types and precedences of all succeeding expressions which in turn rely on the precedence and types of all preceding expressions. In many cases cyclic precedence dependencies would occur which the compiler cannot resolve, and the large amount of work the compiler would have to do to resolve unambiguous graphs would unlikely be worth the potential ambiguities that allowing unrestricted operator precedences may cause.

%p To prevent this in any sequence of un-bracketed operators the precedence for each operator must be the same for all reachable left-hand side and right-hand side types for which the operator is valid.

%p For example for the compilation of an expression (a op1 b op2 c) to succeed either:

%ul {
    %li {
        The following precedences must be identical:
        %ul {
            %li "((a op1 b) <strong>op2</strong> c) == (b <strong>op2</strong> c)"
            %li "(a <strong>op1</strong> b) == (a <strong>op1</strong> (b op2 c))"
        }
    }
    %li a op1 b is undefined, in which case (a op1 (b op2 c)) must be defined.
    %li b op2 c is undefined, in which case ((a op1 b) op2 c)) must be defined.
}

%p The following example shows how to declare and use modified precedence operators correctly.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
class MyInt(value:int = 0) : int(value) {
    def 5 +(o:const int) = MyInt(super + o)
    def add(o:const int) = MyInt(super + o)
}

i2 := MyInt(2)
bd := i2 + 6 + 7 // INVALID: In (i2 + 6) + 7, + has operator precedence 5
                 //          In 6 + 7, + has operator precedence 3

bd := (i2 + 6) + 7 // Fine, used parentheses to resolve ambiguity.
gd := i2 * 6 * 7
// Fine, in all possible valid LHS * RHS pairs in the above expression, * has
// a precedence of -3.

g2 := i2 add 6 add 7
// Fine, (6 add 7) is invalid. i2 add 6 has a return type of MyInt which is a
// valid left-hand side for (LHS add 7).
EOF

%a(href=typematch.html) previous | " | " | %a(href=index.html) up | " | " | %a(href=parsing.html) next
