!html
head {
    %title nyah - introduction - functions
    link(rel=stylesheet, type=text/css, href=../css/global.css)
}

!body

%h2 Functions

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    // A function with a single statement. The "->" is optional.
    def add(a:const int, b:const int):int -> return a + b

    // Return types can always be omitted, in which case they are inferred
    // by the compiler.
    // (= value) is equivalent to (return value) at function scope.
    def subtract(a:const int, b:const int) = a - b

    // When a function body is a single return statement or a { block }
    // I prefer to omit the ->

    // A function containing several statements.
    def divide(a:const int, b:const int) {
        assert(b != 0)
        return a / b
    }

    // Argument types may also be omitted.
    def generic_add(a, b) = a + b

    // A new function is generated for each set of argument types,
    // so the following two calls created two different functions.
    generic_add(1, 2)
    generic_add(1f, 2f)

    // assign_ptr's first argument can be any type, but must be a
    // pointer. The second argument may be passed from a const or non-const
    // expression (unless a more specific non-const overload exists) but
    // is treated as a const variable within the function.
    def assign_ptr(a:*, b:const) -> *a = b

    // Functions can be overloaded, the most specific function always
    // matches.
    def end(a) = a.end()

    def end(a:char *) {
        while (*a != '\0') ++a
        return a
    }

    def end(a:*) {
        // create a compile time error if called.
        @error "Cannot retrieve end of pointer"
    }

    // A function containing return types with different statements can
    // be made to return a "variant[...T]" where ...T is the set of types
    // of all possible return types. ...T is deduced by the compiler.
    // variant is implemented as a set of types and meta-programs within
    // nyah itself with no special compiler support necessary.
    def item_or_false(v, i):variant {
        it := v.find(i)
        return if(it == v.end; false ; it)
    }
EOF

%p &ldquo;?&rdquo; can be used as a placeholder for an unknown type, and &ldquo;?name&rdquo; gives the unknown type a name it can be referred to by later. When calling a function the most specific function match is called.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    def end(v: vector[?]) = v.end

    // : is optional before ?
    def identical(a ?T, b:T) = (a == b)

    identical(1, 2)       // returns false
    identical(1, "hello") // compile time error
EOF

%p &ldquo;...&rdquo; can be used as a placeholder for a sequence of zero, one or more unknown types, and &ldquo;...name&rdquo; can be used to give those types a name.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    // this version of end accepts vector that have more than one template
    // parameter
    def end(v: vector[...]) = v.end

    // When no type parameters are specified for a class with type arguments
    // after a ":", then the "..." is implicit.
    def end_simple(v: vector) = v.end
EOF

%p Single argument functions can be called without using brackets:
%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    end_c := end c
    end_c(end_c == end(c))

    fun_ptr := end(?)  // store function pointer to `end' in variable fun_ptr.
    assert(fun_ptr c == fun_ptr(c))
EOF

%a(href=control.html) previous | " | " | %a(href=arrays.html) next
