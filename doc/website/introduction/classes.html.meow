!html
head {
    %title nyah - introduction - classes and type parameters
    link(rel=stylesheet, type=text/css, href=../css/global.css)
}

!body

%h2 Simple classes

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    class animal {
        // pure virtual method, must be overridden for a class to be concrete
        pure speak

        // "impure" virtual method.
        virtual def friendly = "no"
    }

    // descend from animal
    class cat : animal {
        // def! overrides a virtual method, and will issue a compiler error
        // if no such virtual method exists in a base class.
        def! speak -> println("mew")
    }

    class kiwi : animal {
        def be_quiet -> println("...") // a normal method
        def! friendly = "yes"  // a rare animal

        // an alternative way of writing def!
        override def speak -> be_quiet
    }

    c:animal * = new cat
    c.speak // prints "mew"
    println(c.friendly) // prints "no"

    k:animal * = new kiwi
    k.speak // prints "..."
    println(k.friendly) // prints "yes"
EOF

%h2 Classes with type parameters

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    // type parameter T
    // default access level for a class is "public"
    class scoped_ptr[T] {
        // "def this" is used to created constructors.
        // No initialiser list needed, nyah automatically initialises class
        // data with results of all member assignments at the beginning of
        // a constructor.
        def this(ptr:T *) -> ptr_ = ptr

        // Destructor is a method called destruct.
        def destruct -> delete ptr_

        // Default constructor provided unless:
        delete this()

      private:
        // can assign attributes to variables in class
        ptr_:T * = null
    }

    // constructor shorthand.. because a and b do not have types.. pair
    // gets two type parameters automatically. The default constructor
    // is also created as it is not deleted (or deleted by any base).
    // A constructor for a single argument is not created.
    class simple_pair(a, b) {
        first  := a
        second := b
    }

    // shorthand for the above
    class simplest_pair(public first, public second)
EOF

%p Before introducing further meta-programming concepts a useful property of void variables will be discussed. In nyah a variable may be given type &ldquo;void&rdquo;. Such variables can only be assigned to from void itself or another void variable. Variables with void type will not be stored at all within output programs; they are present to serve useful meta-programming idioms.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    empty := void

    // can re-assign from void
    empty = void

    // this is identical to writing nonexistant := void
    nonexistant : void

    // can assign to void from other void variables.
    nonexistant = empty

    // this is permitted
    nollo:void = default
EOF

%p void types can be used together with default arguments to allow specification of a pair which can store 0, 1 or 2 attributes.

%code(langdef=/usr/share/source-highlight/nyah.lang) <<EOF
    // Allow 0, 1 or 2 arguments to be specified in the constructor.
    class simple_pair2[T1 = void, T2 = void](
        public first:T1 = T1(), public second:T2 = T2())

    // Simpler still.
    class simplest_pair2(public first = default, public second = default)

    // p1 will not be stored at all within the output binary as it only has
    // void members. Can't do much with it.
    p1 := simplest_pair2()

    p2 := simplest_pair2(1)
    p3 := simplest_pair2(1, "hey")
EOF

%a(href=arrays.html) previous | " | " | %a(href=index.html) up | " | " | %a(href=variadic.html) next
